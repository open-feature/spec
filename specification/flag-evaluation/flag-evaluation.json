[
    {
        "id": "1.1",
        "clean id": "1_1",
        "content": "The `API`, and any state it maintains SHOULD exist as a global singleton, even in cases wherein multiple versions of the `API` are present at runtime.",
        "RFC 2119 keyword": "SHOULD",
        "children": []
    },
    {
        "id": "1.2",
        "clean id": "1_2",
        "content": "The `API` MUST provide a function to set the global `provider` singleton, which accepts an API-conformant `provider` implementation.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.3",
        "clean id": "1_3",
        "content": "The `API` MUST provide a function to add `hooks` which accepts one or more API-conformant `hooks`, and appends them to the collection of any previously added hooks. When new hooks are added, previously added hooks are not removed.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.4",
        "clean id": "1_4",
        "content": "The API MUST provide a function for retrieving the `provider` implementation.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.5",
        "clean id": "1_5",
        "content": "The `API` MUST provide a function for creating a `client` which accepts the following options:- name (optional): A logical string identifier for the client.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.6",
        "clean id": "1_6",
        "content": "The client MUST provide a method to add `hooks` which accepts one or more API-conformant `hooks`, and appends them to the collection of any previously added hooks. When new hooks are added, previously added hooks are not removed.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.7",
        "clean id": "1_7",
        "content": "The `client` MUST provide methods for flag evaluation, with parameters `flag key` (string, required), `default value` (boolean | number | string | structure, required), `evaluation context` (optional), and `evaluation options` (optional), which returns the flag value.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.8",
        "clean id": "1_8",
        "content": "The language type system differentiates between strings, numbers, booleans and structures.",
        "RFC 2119 keyword": null,
        "children": [
            {
                "id": "1.8.1",
                "clean id": "1_8_1",
                "content": "The `client` MUST provide methods for typed flag evaluation, including boolean, numeric, string, and structure.",
                "RFC 2119 keyword": "MUST",
                "children": []
            },
            {
                "id": "1.8.2",
                "clean id": "1_8_2",
                "content": "The `client` SHOULD guarantee the returned value of any typed flag evaluation method is of the expected type. If the value returned by the underlying provider implementation does not match the expected type, it's to be considered abnormal execution, and the supplied `default value` should be returned.",
                "RFC 2119 keyword": "SHOULD",
                "children": []
            }
        ]
    },
    {
        "id": "1.9",
        "clean id": "1_9",
        "content": "The `client` MUST provide methods for detailed flag value evaluation with parameters `flag key` (string, required), `default value` (boolean | number | string | structure, required), `evaluation context` (optional), and `evaluation options` (optional), which returns an `evaluation details` structure.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.10",
        "clean id": "1_10",
        "content": "The `evaluation details` structure's `value` field MUST contain the evaluated flag value.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.11",
        "clean id": "1_11",
        "content": "The language supports generics (or an equivalent feature).",
        "RFC 2119 keyword": null,
        "children": [
            {
                "id": "1.11.1",
                "clean id": "1_11_1",
                "content": "The `evaluation details` structure SHOULD accept a generic argument (or use an equivalent language feature) which indicates the type of the wrapped `value` field.",
                "RFC 2119 keyword": "SHOULD",
                "children": []
            }
        ]
    },
    {
        "id": "1.12",
        "clean id": "1_12",
        "content": "The `evaluation details` structure's `flag key` field MUST contain the `flag key` argument passed to the detailed flag evaluation method.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.13",
        "clean id": "1_13",
        "content": "In cases of normal execution, the `evaluation details` structure's `variant` field MUST contain the value of the `variant` field in the `flag resolution` structure returned by the configured `provider`, if the field is set.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.14",
        "clean id": "1_14",
        "content": "In cases of normal execution, the `evaluation details` structure's `reason` field MUST contain the value of the `reason` field in the `flag resolution` structure returned by the configured `provider`, if the field is set.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.15",
        "clean id": "1_15",
        "content": "In cases of abnormal execution, the `evaluation details` structure's `error code` field MUST identify an error occurred during flag evaluation, having possible values `\"PROVIDER_NOT_READY\"`, `\"FLAG_NOT_FOUND\"`, `\"PARSE_ERROR\"`, `\"TYPE_MISMATCH\"`, or `\"GENERAL\"`.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.16",
        "clean id": "1_16",
        "content": "In cases of abnormal execution (network failure, unhandled error, etc) the `reason` field in the `evaluation details` SHOULD indicate an error.",
        "RFC 2119 keyword": "SHOULD",
        "children": []
    },
    {
        "id": "1.17",
        "clean id": "1_17",
        "content": "The `evaluation options` structure's `hooks` field denotes a collection of hooks that the client MUST execute for the respective flag evaluation, in addition to those already configured.",
        "RFC 2119 keyword": "MUST",
        "children": []
    },
    {
        "id": "1.18",
        "clean id": "1_18",
        "content": "Methods, functions, or operations on the client MUST NOT throw exceptions, or otherwise abnormally terminate. Flag evaluation calls must always return the `default value` in the event of abnormal execution. Exceptions include functions or methods for the purposes for configuration or setup.",
        "RFC 2119 keyword": "MUST NOT",
        "children": []
    },
    {
        "id": "1.19",
        "clean id": "1_19",
        "content": "In the case of abnormal execution, the client SHOULD log an informative error message.",
        "RFC 2119 keyword": "SHOULD",
        "children": []
    },
    {
        "id": "1.20",
        "clean id": "1_20",
        "content": "The `client` SHOULD provide asynchronous or non-blocking mechanisms for flag evaluation.",
        "RFC 2119 keyword": "SHOULD",
        "children": []
    },
    {
        "id": "1.21",
        "clean id": "1_21",
        "content": "The `client` MUST transform the `evaluation context` using the `provider's` `context transformer` function, before passing the result of the transformation to the provider's flag resolution functions.",
        "RFC 2119 keyword": "MUST",
        "children": []
    }
]